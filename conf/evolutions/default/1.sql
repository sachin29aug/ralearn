-- Created by Ebean DDL
-- To stop Ebean DDL generation, remove this comment (both lines) and start using Evolutions

-- !Ups

-- apply changes
create table book (
  id                            bigint generated by default as identity not null,
  created                       timestamptz,
  average_rating                float,
  rating_count                  integer,
  order_index                   bigint,
  title                         varchar(255),
  author                        varchar(255),
  publish_date                  varchar(255),
  good_reads_url                varchar(500),
  category                      varchar(255),
  sub_category                  varchar(255),
  isbn                          varchar(255),
  cover_image_url               varchar(255),
  description                   varchar(255),
  preview_url                   varchar(255),
  author_description            varchar(255),
  constraint pk_book primary key (id)
);

create table category (
  id                            bigint generated by default as identity not null,
  created                       timestamptz,
  parent_id                     bigint,
  title                         varchar(255),
  fa_icon_class                 varchar(255),
  constraint pk_category primary key (id)
);

create table company (
  id                            bigint generated by default as identity not null,
  created                       timestamptz,
  name                          varchar(255),
  constraint pk_company primary key (id)
);

create table google_book (
  id                            bigint generated by default as identity not null,
  created                       timestamptz,
  average_rating                float not null,
  ratings_count                 integer not null,
  page_count                    integer not null,
  printed_page_count            integer not null,
  is_ebook                      boolean default false not null,
  pdf_is_available              boolean default false not null,
  epub_is_available             boolean default false not null,
  reading_mode_text             boolean default false not null,
  reading_mode_image            boolean default false not null,
  contains_epub_bubbles         boolean default false not null,
  contains_image_bubbles        boolean default false not null,
  embeddable                    boolean default false not null,
  public_domain                 boolean default false not null,
  book_id                       bigint,
  gb_id                         varchar(255),
  etag                          varchar(255),
  content_version               varchar(255),
  title                         varchar(255),
  sub_title                     varchar(255),
  authors                       varchar(255),
  main_category                 varchar(255),
  categories                    varchar(500),
  description                   text,
  maturity_rating               varchar(255),
  self_link                     varchar(500),
  preview_link                  varchar(500),
  thumbnail_url                 varchar(500),
  small_thumbnail_url           varchar(500),
  small_url                     varchar(500),
  medium_url                    varchar(500),
  large_url                     varchar(500),
  extra_large_url               varchar(500),
  info_link                     varchar(500),
  buy_link                      varchar(500),
  canonical_volume_link         varchar(500),
  isbn10                        varchar(255),
  isbn13                        varchar(255),
  publisher                     varchar(255),
  published_date                varchar(255),
  language                      varchar(255),
  epub_acs_token_link           varchar(500),
  sale_country                  varchar(255),
  saleability                   varchar(255),
  viewability                   varchar(255),
  access_view_status            varchar(255),
  constraint uq_google_book_book_id unique (book_id),
  constraint pk_google_book primary key (id)
);

create table user_table (
  id                            bigint generated by default as identity not null,
  created                       timestamptz,
  first_name                    varchar(255),
  last_name                     varchar(255),
  email                         varchar(255),
  password                      varchar(255),
  constraint pk_user_table primary key (id)
);

create table user_book (
  id                            bigint generated by default as identity not null,
  created                       timestamptz,
  user_id                       bigint,
  book_id                       bigint,
  assigned                      timestamptz,
  last_accessed                 timestamptz,
  favorite                      boolean,
  constraint pk_user_book primary key (id)
);

create table user_category (
  id                            bigint generated by default as identity not null,
  created                       timestamptz,
  user_id                       bigint,
  category_id                   bigint,
  constraint pk_user_category primary key (id)
);

create table user_feedback (
  id                            bigint generated by default as identity not null,
  created                       timestamptz,
  user_id                       bigint,
  feedback                      text,
  constraint pk_user_feedback primary key (id)
);

-- foreign keys and indices
create index ix_category_parent_id on category (parent_id);
alter table category add constraint fk_category_parent_id foreign key (parent_id) references category (id) on delete restrict on update restrict;

alter table google_book add constraint fk_google_book_book_id foreign key (book_id) references book (id) on delete restrict on update restrict;

create index ix_user_book_user_id on user_book (user_id);
alter table user_book add constraint fk_user_book_user_id foreign key (user_id) references user_table (id) on delete restrict on update restrict;

create index ix_user_book_book_id on user_book (book_id);
alter table user_book add constraint fk_user_book_book_id foreign key (book_id) references book (id) on delete restrict on update restrict;

create index ix_user_category_user_id on user_category (user_id);
alter table user_category add constraint fk_user_category_user_id foreign key (user_id) references user_table (id) on delete restrict on update restrict;

create index ix_user_category_category_id on user_category (category_id);
alter table user_category add constraint fk_user_category_category_id foreign key (category_id) references category (id) on delete restrict on update restrict;

create index ix_user_feedback_user_id on user_feedback (user_id);
alter table user_feedback add constraint fk_user_feedback_user_id foreign key (user_id) references user_table (id) on delete restrict on update restrict;


-- !Downs

-- drop all foreign keys
alter table if exists category drop constraint if exists fk_category_parent_id;
drop index if exists ix_category_parent_id;

alter table if exists google_book drop constraint if exists fk_google_book_book_id;

alter table if exists user_book drop constraint if exists fk_user_book_user_id;
drop index if exists ix_user_book_user_id;

alter table if exists user_book drop constraint if exists fk_user_book_book_id;
drop index if exists ix_user_book_book_id;

alter table if exists user_category drop constraint if exists fk_user_category_user_id;
drop index if exists ix_user_category_user_id;

alter table if exists user_category drop constraint if exists fk_user_category_category_id;
drop index if exists ix_user_category_category_id;

alter table if exists user_feedback drop constraint if exists fk_user_feedback_user_id;
drop index if exists ix_user_feedback_user_id;

-- drop all
drop table if exists book cascade;

drop table if exists category cascade;

drop table if exists company cascade;

drop table if exists google_book cascade;

drop table if exists user_table cascade;

drop table if exists user_book cascade;

drop table if exists user_category cascade;

drop table if exists user_feedback cascade;

